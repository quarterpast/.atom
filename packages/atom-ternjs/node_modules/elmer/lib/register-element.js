(function() {
  var registerElement;

  module.exports = registerElement = function(elementName, elementPrototype) {
    var classToExtend, key, prototype, registerArgs, tagToExtend, value, viewClass, _ref;
    tagToExtend = null;
    classToExtend = null;
    if (typeof elementPrototype["extends"] === 'string') {
      tagToExtend = elementPrototype["extends"];
    } else if (elementPrototype["extends"] != null) {
      classToExtend = elementPrototype["extends"];
    }
    if (classToExtend == null) {
      classToExtend = HTMLElement;
    }
    prototype = Object.create(classToExtend.prototype);
    for (key in elementPrototype) {
      value = elementPrototype[key];
      prototype[key] = value;
    }
    registerArgs = {
      prototype: prototype
    };
    if (tagToExtend != null) {
      registerArgs["extends"] = tagToExtend;
    }
    viewClass = document.registerElement(elementName, registerArgs);
    if ((elementPrototype.modelConstructor != null) && ((typeof atom !== "undefined" && atom !== null ? (_ref = atom.views) != null ? _ref.addViewProvider : void 0 : void 0) != null)) {
      atom.views.addViewProvider({
        modelConstructor: elementPrototype.modelConstructor,
        viewConstructor: viewClass
      });
    }
    return viewClass;
  };

}).call(this);
